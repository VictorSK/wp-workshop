#!/usr/bin/env ruby
#frozen_string_literal: true

# Deploy select content from your dev project to remote server for live or staging.
# To use, run this script from this projects root directory using:
#
# $ bin/deploy [live|staging] [options]
#
# WARNING: This will overwrite select content deployed to remote server.
#
# For additional usage options, use the --help flag.
#
# rsync options
# r - Recursive
# v - Verbose
# c - Sync by checksum
# z - compress data transfer
# h - human readable file sizes
# i - itemize changes
# n - dry run (show changes but don't make them)

require 'optparse'
require 'yaml'

# Edit CONFIG params in config/config.rb
require './config/config.rb'

module WPWorkshop
  class Deploy
    def initialize(mode)
      @options = {
        mode: mode, # "live" or "staging"
        simulate: false
      }

      OptionParser.new do |opts|
        opts.banner = 'Usage: bin/deploy [live|staging] [options]'
        opts.on('-t', '--themes', 'Deploy current theme to remote server.') { @options[:theme] = true }
        opts.on('-p', '--plugins', 'Deploy all plugins to remote server.') { @options[:plugins] = true }
        opts.on('-m', '--mu-plugins', 'Deploy all must use plugins to remote server.') { @options[:mu_plugins] = true }
        opts.on('-u', '--uploads', 'Deploy all uploads to remote server.') { @options[:uploads] = true }
        opts.on('-d', '--data', 'Deploy database dump file to remote server.') { @options[:data_dump] = true }
        opts.on('-s', '--simulate', 'Output command simulated, not executed.') { @options[:simulate] = true }
        opts.on('-n', '--dry', 'Perform deploy dry run.') do
          puts 'Running deploy dry run...'
          puts
          @options[:dry_run] = true
        end
      end.parse!

      case mode
      when 'live'
        deploy_themes if @options[:theme]
        deploy_plugins if @options[:plugins]
        deploy_mu_plugins if @options[:mu_plugins]
        deploy_uploads if @options[:uploads]
        deploy_database if @options[:data_dump]
      when 'staging'
        deploy_themes if @options[:theme]
        deploy_plugins if @options[:plugins]
        deploy_mu_plugins if @options[:mu_plugins]
        deploy_uploads if @options[:uploads]
        deploy_database if @options[:data_dump]
      else
        raise ArgumentError, "Invalid mode specified. Use 'live' or 'staging'."
      end
    end

    def deploy_themes
      cli_opts = %w(r v c z h i)
      cli_opts << 'n' if @options[:dry_run]

      if @options[:mode] == 'live'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:theme][:dev_path]}/#{CONFIG[:theme][:dev_folder]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:live_path]}#{CONFIG[:theme][:remote_path]}/#{CONFIG[:theme][:remote_folder]}/"
      elsif @options[:mode] == 'staging'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:theme][:dev_path]}/#{CONFIG[:theme][:dev_folder]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:staging_path]}#{CONFIG[:theme][:remote_path]}/#{CONFIG[:theme][:remote_folder]}/"
      end

      if @options[:simulate]
        puts 'Deploy command to be executed... (OUTPUTTED WITHOUT EXECUTE)'
        puts cmd
        puts "\nReview outputted command thoroughly before running deploy command."
        puts
      else
        puts 'Deploying theme to remote server...' unless @options[:dry_run]
        system(cmd) unless @options[:simulate]
        puts "\nDeploying theme completed."
        puts
      end
    end

    def deploy_plugins
      cli_opts = %w(r v c z h i)
      cli_opts << 'n' if @options[:dry_run]

      if @options[:mode] == 'live'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:plugins][:dev_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:live_path]}#{CONFIG[:plugins][:remote_path]}/"
      elsif @options[:mode] == 'staging'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:plugins][:dev_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:staging_path]}#{CONFIG[:plugins][:remote_path]}/"
      end

      if @options[:simulate]
        puts 'Deploy command to be executed... (OUTPUTTED WITHOUT EXECUTE)'
        puts cmd
        puts "\nReview outputted command thoroughly before running deploy command."
        puts
      else
        puts 'Deploying plugins to remote server...' unless @options[:dry_run]
        system(cmd) unless @options[:simulate]
        puts "\nDeploying plugins completed."
        puts
      end
    end

    def deploy_mu_plugins
      cli_opts = %w(r v c z h i)
      cli_opts << 'n' if @options[:dry_run]

      if @options[:mode] == 'live'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:plugins][:dev_mu_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:live_path]}#{CONFIG[:plugins][:remote_mu_path]}/"
      elsif @options[:mode] == 'staging'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:plugins][:dev_mu_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:staging_path]}#{CONFIG[:plugins][:remote_mu_path]}/"
      end

      if @options[:simulate]
        puts 'Deploy command to be executed... (OUTPUTTED WITHOUT EXECUTE)'
        puts cmd
        puts "\nReview outputted command thoroughly before running deploy command."
        puts
      else
        puts 'Deploying must use plugins to remote server...' unless @options[:dry_run]
        system(cmd) unless @options[:simulate]
        puts "\nDeploying must use plugins completed."
        puts
      end
    end

    def deploy_uploads
      cli_opts = %w(r v c z h i)
      cli_opts << 'n' if @options[:dry_run]

      if @options[:mode] == 'live'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:uploads][:dev_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:live_path]}#{CONFIG[:uploads][:remote_path]}/"
      elsif @options[:mode] == 'staging'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:excludes]} #{CONFIG[:uploads][:dev_path]}/ #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:remote][:staging_path]}#{CONFIG[:uploads][:remote_path]}/"
      end

      if @options[:simulate]
        puts 'Deploy command to be executed... (OUTPUTTED WITHOUT EXECUTE)'
        puts cmd
        puts "\nReview outputted command thoroughly before running deploy command."
        puts
      else
        puts 'Deploying must use plugins to remote server...' unless @options[:dry_run]
        system(cmd) unless @options[:simulate]
        puts "\nDeploying uploads completed."
        puts
      end
    end

    def deploy_database
      cli_opts = %w(r v c z h i)
      cli_opts << 'n' if @options[:dry_run]

      if @options[:mode] == 'live'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:database][:dev_path]}/#{CONFIG[:database][:dev_dump]} #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:database][:remote_path]}/"
      elsif @options[:mode] == 'staging'
        cmd = "rsync -#{cli_opts.join('')} --progress --delete --no-perms #{CONFIG[:database][:dev_path]}//#{CONFIG[:database][:dev_dump]} #{CONFIG[:remote][:user]}@#{CONFIG[:remote][:host]}:#{CONFIG[:database][:remote_path]}/"
      end

      if @options[:simulate]
        puts 'Deploy command to be executed... (OUTPUTTED WITHOUT EXECUTE)'
        puts cmd
        puts "\nReview outputted command thoroughly before running deploy command."
        puts
      else
        puts 'Deploying database dump file to remote server...' unless @options[:dry_run]
        system(cmd) unless @options[:simulate]
        puts "\nDeploying database export completed."
        puts
      end
    end
  end
end

# Check if the mode argument is passed and is either "live" or "staging"
if ARGV.empty? || !%w[live staging].include?(ARGV[0])
  puts "You must specify 'live' or 'staging' to run this script."
  puts "Usage: bin/deploy [live|staging] [options]"
  puts
else
  WPWorkshop::Deploy.new(ARGV[0])
end
